# This file extends the Astro docker-compose setup with additional services
# FIXED VERSION - Compatible with Windows 11 and x86_64 architecture
# It will be automatically loaded by docker-compose when running astro dev start

services:
  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    platform: linux/amd64 # Changed from linux/arm64 for Windows compatibility
    command: >
      bash -c "pip install mlflow==2.9.2 psycopg2-binary boto3 && 
               export MLFLOW_S3_ENDPOINT_URL=http://minio:9000 &&
               mlflow server --host 0.0.0.0 --port 5001 
               --backend-store-uri postgresql://mlflow:mlflow@mlflow-db:5432/mlflow 
               --default-artifact-root s3://mlflow-artifacts/ 
               --serve-artifacts"
    ports:
      - "5001:5001"
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      mlflow-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - airflow
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL for MLflow
  mlflow-db:
    image: postgres:16-alpine
    platform: linux/amd64 # Changed from linux/arm64 for Windows compatibility
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - mlflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mlflow"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - airflow
      - default
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    platform: linux/amd64 # Changed from linux/arm64 for Windows compatibility
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"] # Better health check
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    networks:
      - airflow
      - default
    restart: unless-stopped

  # Create MLflow bucket in MinIO
  minio-mc:
    image: minio/mc:latest
    platform: linux/amd64 # Changed from linux/arm64 for Windows compatibility
    depends_on:
      minio:
        condition: service_healthy
    networks: # Added proper network configuration
      - airflow
      - default
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/mlflow-artifacts || true;
      mc anonymous set public myminio/mlflow-artifacts || true;
      exit 0;
      "

  # Add Redis to the Airflow network for Celery if needed
  redis:
    image: redis:7-alpine
    platform: linux/amd64 # Changed from linux/arm64 for Windows compatibility
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
      start_period: 10s
    networks:
      - airflow
      - default
    restart: unless-stopped

  # Streamlit UI for model inference
  streamlit-ui:
    image: python:3.11-slim
    platform: linux/amd64
    working_dir: /app
    command: >
      bash -c "
      apt-get update && apt-get install -y libgomp1 build-essential cmake dos2unix &&
      pip install --upgrade pip &&
      pip install --no-cache-dir streamlit==1.32.2 pandas==2.2.0 numpy==1.26.3 plotly==5.19.0 mlflow==2.9.2 scikit-learn==1.4.0 xgboost==2.0.3 lightgbm==4.3.0 joblib==1.3.2 boto3==1.34.25 python-dateutil==2.8.2 dill==0.3.7 catboost==1.2.2 &&
      if [ -f /app/entrypoint.sh ]; then
        dos2unix /app/entrypoint.sh || sed -i 's/\r$//' /app/entrypoint.sh;
        chmod +x /app/entrypoint.sh;
        bash /app/entrypoint.sh;
      elif [ -f /app/inference_app.py ]; then
        streamlit run /app/inference_app.py --server.address 0.0.0.0 --server.port 8501;
      else
        streamlit run /app/app.py --server.address 0.0.0.0 --server.port 8501;
      fi
      "
    ports:
      - '8501:8501'
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5001
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_DEFAULT_REGION=us-east-1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./ui:/app
      - ./include:/usr/local/airflow/include:ro
    depends_on:
      - mlflow
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

volumes:
  mlflow-db-volume:
  minio-data:

networks:
  airflow:
    driver: bridge
  default:
    driver: bridge
    name: astro-sales-forecast_[REEMPLAZA_CON_TU_ID]_default # Actualiza con el nombre real
